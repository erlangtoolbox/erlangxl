-module(strikead_json).

-export([compile/1,compile/2]).

-compile({parse_transform, do}).

compile([Path, Dest]) -> compile(Path, Dest).
compile(Path, Dest) ->
    Module = filename:basename(Path, filename:extension(Path)),
	HrlPath = filename:join([Dest, "include", Module ++ ".hrl"]),
	ModulePath = filename:join([Dest, "src", Module ++ ".erl"]),
	erlang:display("compile " ++ Path ++ " to " ++ Dest),
	ok = do([error_m ||
		Records <- file:consult(Path),
        generate_file(HrlPath, fun(F) -> generate_records(Records, F) end),
        generate_file(ModulePath, fun(F) -> generate_module(Records, Module, F) end)
	]).

generate_records([], _Out) -> ok;
generate_records([{Name, Fields} | T], Out) ->
	do([error_m||
		file:write(Out, "\n-record(" ++ atom_to_list(Name) ++ ", {\n\t" ++
            strikead_string:join([ generate_field(Field) || Field <- Fields], ",\n\t") ++
		"})."),
		generate_records(T, Out)
	]).

generate_field({Name, _Type, required}) -> atom_to_list(Name);
generate_field({Name, T, optional}) -> io_lib:format("~p=#~p{}", [Name, T]);
generate_field({Name, string, {optional, Default}}) -> io_lib:format("~p=\"~s\"", [Name, Default]);
generate_field({Name, _T, {optional, Default}}) -> io_lib:format("~p=~p", [Name, Default]).

generate_file(Path, Generate) ->
    erlang:display("...generating " ++ Path),
    do([error_m ||
        filelib:ensure_dir(Path),
        Out <- file:open(Path, [write]),
        Res <- return(
            do([error_m ||
                file:write(Out, "%% Generated by ejsonbind\n"),
                Generate(Out)
            ])),
        file:close(Out),
        Res
    ]).

generate_module(Records, Name, Out) ->
    do([error_m ||
        file:write(Out, "-module(" ++ Name ++").\n\n"),
        file:write(Out, "-include(\"" ++ Name ++".hrl\").\n\n"),
        file:write(Out, "-export([" ++ strikead_string:join([ atom_to_list(RecordName) ++ "_to_json/1, " ++ atom_to_list(RecordName) ++ "_from_json/1" ||{RecordName, _} <- Records],",") ++"]).\n\n"),
        generate_to_json(Records, Out),
        generate_from_json(Records, Out)
    ]).

generate_to_json([], _Out) -> ok;
generate_to_json([{Name, Fields} | T], Out) ->
    do([error_m ||
        file:write(Out, atom_to_list(Name) ++ "_to_json(R) -> \n"),
        file:write(Out, "\"{\"++"),
        generate_to_json_fields(Name, Fields, Out),
        file:write(Out, "++\"}\""),
        file:write(Out, ".\n"),
        generate_to_json(T, Out)
    ]).


generate_to_json_fields(_RecordName, [], _Out) -> ok;
generate_to_json_fields(RecordName, [Field | Fields], Out) ->
    do([error_m ||
        generate_to_json_field(RecordName, Field, Out),
        file:write(Out, comma(Fields)),
        generate_to_json_fields(RecordName, Fields, Out)
    ]).

generate_to_json_field(RecordName, {Name, string, _ }, Out) ->          io:format(Out, "lists:flatten(io_lib:format(\"\\\"~p\\\": ~~p\", [R#~p.~p]))", [Name, RecordName, Name]);
generate_to_json_field(RecordName, {Name, integer, _ }, Out) ->         io:format(Out, "lists:flatten(io_lib:format(\"\\\"~p\\\": ~~p\", [R#~p.~p]))", [Name, RecordName, Name]);
generate_to_json_field(RecordName, {Name, float, _ }, Out) ->           io:format(Out, "lists:flatten(io_lib:format(\"\\\"~p\\\": ~~p\", [R#~p.~p]))", [Name, RecordName, Name]);
generate_to_json_field(RecordName, {Name, {list, string}, _ }, Out) ->  io:format(Out, "lists:flatten(io_lib:format(\"\\\"~p\\\": ~~p\", [R#~p.~p]))", [Name, RecordName, Name]);
generate_to_json_field(RecordName, {Name, {list, integer}, _ }, Out) -> io:format(Out, "lists:flatten(io_lib:format(\"\\\"~p\\\": ~~p\", [R#~p.~p]))", [Name, RecordName, Name]);
generate_to_json_field(RecordName, {Name, {list, float}, _ }, Out) ->   io:format(Out, "lists:flatten(io_lib:format(\"\\\"~p\\\": ~~p\", [R#~p.~p]))", [Name, RecordName, Name]);
generate_to_json_field(RecordName, {Name, {list, Rec}, _ }, Out) ->
    do([error_m ||
        io:format(Out, "\"\\\"~p\\\": [\" ++ ", [Name]),
        io:format(Out, "strikead_string:join([~p_to_json(X)||X <- R#~p.~p], \",\") ++ ", [Rec, RecordName, Name]),
        file:write(Out, "\"]\"")
    ]);
generate_to_json_field(RecordName, {Name, Rec, _ }, Out) ->
        io:format(Out, "\"\\\"~p\\\": \" ++ ~p_to_json(R#~p.~p)", [Name, Rec, RecordName, Name]).

comma([]) -> "";
comma(_T) -> "++ \",\" ++ \n".

generate_from_json([], _Out) -> ok;
generate_from_json([{Name, Fields} | T], Out) ->
    do([error_m ||
        file:write(Out, atom_to_list(Name) ++ "_from_json(Json) -> {J, _, _} = ktuo_json:decode(Json), " ++ atom_to_list(Name) ++ "_from_json_(J). \n"),
        file:write(Out, atom_to_list(Name) ++ "_from_json_(J) -> \n"),
        generate_from_json_fields(Name, Fields, Out),
        file:write(Out, ".\n"),
        generate_from_json(T, Out)
    ]).

generate_from_json_fields(_RecordName, [], _Out) -> ok;
generate_from_json_fields(RecordName, [Field | Fields], Out) ->
    do([error_m ||
        generate_from_json_field(RecordName, Field, Out),
        file:write(Out, comma(Fields)),
        generate_from_json_fields(RecordName, Fields, Out)
    ]).


generate_from_json_field(RecordName, {Name, _, _ }, Out) -> file:write(Out, "\"\"").

